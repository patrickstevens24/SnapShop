/*
 * TCSS 305 - Winter 2016
 * Assignment 4 - SnapShop
 */

package gui;

import filters.EdgeDetectFilter;
import filters.EdgeHighlightFilter;
import filters.Filter;
import filters.FlipHorizontalFilter;
import filters.FlipVerticalFilter;
import filters.GrayscaleFilter;
import filters.SharpenFilter;
import filters.SoftenFilter;
import image.PixelImage;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * GUI for SnapShop.
 * 
 * @author Patrick Stevens
 * @version 1.0
 */
public class SnapShopGUI {
    /**
     * Number of filters.
     */
    private static final int FILTERS = 7;
    /**
     * Grid layout for the filters.
     */
    private static final GridLayout GRID_FILTER = new GridLayout(3, 1, 5, 10);
    /**
     * Grid layout for the operations.
     */
    private static final GridLayout GRID_OPERATIONS = new GridLayout(7, 1, 5, 10);
    /**
     * Difference between the buttons.
     */
    private static final int BUTTON_DIFFERENCE = 10;
    /**
     * The panel holding the filters.
     */
    private JPanel myFilterPanel;
    /**
     * The panel holding the operations.
     */
    private JPanel myUtilityPanel;
    /**
     * The label holding the Image.
     */
    private JLabel myImageHolder;
    /**
     * The main frame. 
     */
    private final JFrame myFrame;
    /**
     * The save button.
     */
    private JButton mySaveButton;
    /**
     * The close button.
     */
    private JButton myCloseButton;
    /**
     * The file Chooser.
     */
    private final JFileChooser myFileChooser;
    /**
     * The Image.
     */
    private PixelImage myImage;
    /**
     * The file chosen.
     */
    private File myFile;
    /**
     * The list of filters.
     */
    private final List<Filter> myFilterList;
    /**
     * The list of buttons.
     */
    private final List<JButton> myButtonList;
    /**
     * The minimum size.
     */
    private Dimension myMinSize;
    /**
     * The minimum height.
     */
    private int myMinHeight;
    
    /**
     * 
     */
    public SnapShopGUI() {
        
        myFrame = new JFrame("TCSS 305 SnapShop");
        myFileChooser = new JFileChooser(".");
        myFrame.setLocationRelativeTo(null);
        
        myButtonList = new ArrayList<JButton>();
        myFilterList = new ArrayList<Filter>();
        
        myImageHolder = new JLabel();  
    }
    /**
     * 
     */
    public void start() {
        final JPanel utilPanel = new JPanel(new BorderLayout());
        final JPanel filterPanel = new JPanel(new BorderLayout());
        final JPanel photoPanel = new JPanel(new BorderLayout());
        final JPanel photoPanel2 = new JPanel(new BorderLayout());
        final JPanel mainPanel = new JPanel(new BorderLayout());
        
        myUtilityPanel = new JPanel(GRID_FILTER);
        createOptionButtons();

        myFilterPanel = new JPanel(GRID_OPERATIONS);
        createFilterButtons();
        
        final JPanel imagePanel = new JPanel(new BorderLayout());
        myImageHolder = new JLabel();
        myImageHolder.setHorizontalAlignment(JLabel.CENTER);
        myImageHolder.setVerticalAlignment(JLabel.CENTER); 
        imagePanel.add(myImageHolder, BorderLayout.CENTER);
        
        filterPanel.add(myFilterPanel, BorderLayout.WEST);
        mainPanel.add(filterPanel, BorderLayout.NORTH);
        
        utilPanel.add(myUtilityPanel, BorderLayout.WEST);
        mainPanel.add(utilPanel, BorderLayout.SOUTH);
        
        photoPanel.add(imagePanel, BorderLayout.WEST);
        photoPanel2.add(photoPanel, BorderLayout.NORTH);

        myFrame.add(mainPanel, BorderLayout.WEST);
        myFrame.add(photoPanel2, BorderLayout.CENTER);
        myFrame.pack();
        
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myMinHeight = myFrame.getHeight() + BUTTON_DIFFERENCE;
        myMinSize = new Dimension(myFrame.getWidth(), myMinHeight);
        
        myFrame.setMinimumSize(myMinSize);
        enableButtons(false);
        myFrame.setVisible(true);
    }
    /**
     * 
     * 
     */
    private void createFilterButtons() {
        myFilterList.add(new EdgeDetectFilter());
        myFilterList.add(new EdgeHighlightFilter());
        myFilterList.add(new FlipHorizontalFilter());
        myFilterList.add(new FlipVerticalFilter());
        myFilterList.add(new GrayscaleFilter());
        myFilterList.add(new SharpenFilter());
        myFilterList.add(new SoftenFilter());

        for (int i = 0; i < FILTERS; i++) {
            myButtonList.add(i, createFilterButtons(myFilterList.get(i)));
            myFilterPanel.add(myButtonList.get(i));
        } 
    }
    /**
     * 
     * @param theFilter 
     * @return filterButton
     */
    private JButton createFilterButtons(final Filter theFilter) {
        final JButton filterButton = new JButton(theFilter.getDescription());
        filterButton.addActionListener(new ActionListener() {
            /**
             * 
             */
            @Override
            public void actionPerformed(final ActionEvent theAction) {
                theFilter.filter(myImage);
                myImageHolder.setIcon(new ImageIcon(myImage));
                myFrame.pack();
            }
            
        });
        return filterButton;
    }
    /**
     * 
     * @param theUse 
     */
    private void enableButtons(final Boolean theUse) {
        for (final JButton filter: myButtonList) {
            filter.setEnabled(theUse);
        }
    }
    /**
     * 
     */
    private void createOptionButtons() {
        final JButton openButton = new JButton("Open...");
        mySaveButton = new JButton("Save as...");
        myCloseButton = new JButton("  Close Image ");
        mySaveButton.setEnabled(false);
        myCloseButton.setEnabled(false);
        
        myUtilityPanel.add(openButton);
        myUtilityPanel.add(mySaveButton);
        myUtilityPanel.add(myCloseButton);
        
        openButton.addActionListener(new OpenButtonListener());
        mySaveButton.addActionListener(new SaveButtonListener());
        myCloseButton.addActionListener(new CloseButtonListener());
    }
    /**
     * 
     * @author Patrick Stevens
     * @version 1.0
     */
    class OpenButtonListener implements ActionListener {

        @Override
        public void actionPerformed(final ActionEvent theAction) {
            if (myFileChooser.showOpenDialog(myFrame) == (JFileChooser.APPROVE_OPTION)) {
                myFile = myFileChooser.getSelectedFile(); 
                try {
                    myImage = PixelImage.load(myFile);
                    myImageHolder.setIcon(new ImageIcon(myImage));
                    
                    enableButtons(true);
                    mySaveButton.setEnabled(true);
                    myCloseButton.setEnabled(true);
                } catch (final IOException ioe) {
                    JOptionPane.showMessageDialog(myFrame,
                                                "The selected file did not contain an image!",
                                                  "Error!", JOptionPane.ERROR_MESSAGE);
                }
                myFrame.setMinimumSize(null);
                myFrame.pack();
                
                myFrame.setMinimumSize(new Dimension(myFrame.getWidth(),
                                                     myMinHeight));
            }  
        }  
    }
    /**
     * 
     * @author Patrick Stevens
     * @version 1.0
     */
    class SaveButtonListener implements ActionListener {

        @Override
        public void actionPerformed(final ActionEvent theAction) {
            if (myFileChooser.showSaveDialog(myFrame) == JFileChooser.APPROVE_OPTION) {
                try {
                    myImage.save(myFileChooser.getSelectedFile());
                } catch (final IOException ioe) {
                    JOptionPane.showMessageDialog(myFrame, 
                                                  "There was an issue saving the file!",
                                                  "Save Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }  
    }
    /**
     * 
     * @author Patrick Stevens
     * @version 1.0
     */
    class CloseButtonListener implements ActionListener {

        @Override
        public void actionPerformed(final ActionEvent theAction) {
            myImageHolder.setIcon(null);
            enableButtons(false);
            mySaveButton.setEnabled(false);
            myCloseButton.setEnabled(false);
            myFrame.setMinimumSize(myMinSize);
            myFrame.pack();
        }
        
    }
}