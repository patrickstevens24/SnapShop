/*
 * TCSS 305 - Winter 2016
 * Assignment 4 - SnapShop
 */

package gui;

import filters.EdgeDetectFilter;
import filters.EdgeHighlightFilter;
import filters.Filter;
import filters.FlipHorizontalFilter;
import filters.FlipVerticalFilter;
import filters.GrayscaleFilter;
import filters.SharpenFilter;
import filters.SoftenFilter;
import image.PixelImage;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * GUI for SnapShop.
 * 
 * @author Patrick Stevens
 * @version 1.0
 */
public class SnapShopGUI {
    /**
     * Number of filters.
     */
    private static final int FILTERS = 7;
    /**
     * Grid layout for the filters.
     */
    private static final GridLayout GRID_FILTER = new GridLayout(3, 1, 5, 10);
    /**
     * Grid layout for the operations.
     */
    private static final GridLayout GRID_OPERATIONS = new GridLayout(7, 1, 5, 10);
    /**
     * Difference between the buttons.
     */
    private static final int BUTTON_DIFFERENCE = 10;
    /**
     * The panel holding the filters.
     */
    private JPanel myFilterPanel;
    /**
     * The panel holding the operations.
     */
    private JPanel myOperationPanel;
    /**
     * The label holding the Image.
     */
    private JLabel myImageHolder;
    /**
     * The main frame. 
     */
    private final JFrame myFrame;
    /**
     * The save button.
     */
    private JButton mySaveButton;
    /**
     * The close button.
     */
    private JButton myCloseButton;
    /**
     * The file Chooser.
     */
    private final JFileChooser myFileChooser;
    /**
     * The Image.
     */
    private PixelImage myImage;
    /**
     * The file chosen.
     */
    private File myFile;
    /**
     * The list of filters.
     */
    private final List<Filter> myFilterList;
    /**
     * The list of buttons.
     */
    private final List<JButton> myButtonList;
    /**
     * The minimum size.
     */
    private Dimension myMinSize;
    /**
     * The minimum height.
     */
    private int myMinHeight;
    
    /**
     * Constructor for GUI.
     */
    public SnapShopGUI() {
        
        myFrame = new JFrame("TCSS 305 SnapShop");
        myFileChooser = new JFileChooser(".");
        myFrame.setLocationRelativeTo(null);
        
        myButtonList = new ArrayList<JButton>();
        myFilterList = new ArrayList<Filter>();
        
        myImageHolder = new JLabel();  
    }
    /**
     * Constructs and creates the GUI.
     */
    public void start() {
        final JPanel operPanel = new JPanel(new BorderLayout());
        final JPanel filterPanel = new JPanel(new BorderLayout());
        final JPanel photoPanel = new JPanel(new BorderLayout());
        final JPanel photoPanel2 = new JPanel(new BorderLayout());
        final JPanel mainPanel = new JPanel(new BorderLayout());
        
        //Creates operation Grid
        myOperationPanel = new JPanel(GRID_FILTER);
        createOptionButtons();
        
        //Creates filter Grid
        myFilterPanel = new JPanel(GRID_OPERATIONS);
        createFilterButtons();
        
        //Adds image to panel
        final JPanel imagePanel = new JPanel(new BorderLayout());
        myImageHolder = new JLabel();
        myImageHolder.setHorizontalAlignment(JLabel.CENTER);
        myImageHolder.setVerticalAlignment(JLabel.CENTER); 
        imagePanel.add(myImageHolder, BorderLayout.CENTER);
        
        
        filterPanel.add(myFilterPanel, BorderLayout.WEST);
        mainPanel.add(filterPanel, BorderLayout.NORTH);
        
        operPanel.add(myOperationPanel, BorderLayout.WEST);
        mainPanel.add(operPanel, BorderLayout.SOUTH);
        
        photoPanel.add(imagePanel, BorderLayout.WEST);
        photoPanel2.add(photoPanel, BorderLayout.NORTH);
        
        //Adds filter buttons and operation buttons
        myFrame.add(mainPanel, BorderLayout.WEST);
        //Adds photo to frame.
        myFrame.add(photoPanel2, BorderLayout.CENTER);
        myFrame.pack();
        
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myMinHeight = myFrame.getHeight() + BUTTON_DIFFERENCE;
        myMinSize = new Dimension(myFrame.getWidth(), myMinHeight);
        
        myFrame.setMinimumSize(myMinSize);
        enableButtons(false);
        myFrame.setVisible(true);
    }
    /**
     * Private method that adds filter buttons to the filter list. 
     * 
     */
    private void createFilterButtons() {
        myFilterList.add(new EdgeDetectFilter());
        myFilterList.add(new EdgeHighlightFilter());
        myFilterList.add(new FlipHorizontalFilter());
        myFilterList.add(new FlipVerticalFilter());
        myFilterList.add(new GrayscaleFilter());
        myFilterList.add(new SharpenFilter());
        myFilterList.add(new SoftenFilter());
        
        //Adding each filter to filter panel.
        for (int i = 0; i < FILTERS; i++) {
            myButtonList.add(i, createFilterButtons(myFilterList.get(i)));
            myFilterPanel.add(myButtonList.get(i));
        } 
    }
    /**
     * Private method that creates each filter button.
     * 
     * @param theFilter 
     * @return filterButton
     */
    private JButton createFilterButtons(final Filter theFilter) {
        final JButton filterButton = new JButton(theFilter.getDescription());
        filterButton.addActionListener(new ActionListener() {
            /**
             * Action listener for filter buttons. 
             */
            @Override
            public void actionPerformed(final ActionEvent theAction) {
                theFilter.filter(myImage);
                myImageHolder.setIcon(new ImageIcon(myImage));
                myFrame.pack();
            }
            
        });
        return filterButton;
    }
    /**
     * Private method that enables filter buttons. 
     * @param theUse 
     */
    private void enableButtons(final Boolean theUse) {
        for (final JButton filter: myButtonList) {
            filter.setEnabled(theUse);
        }
    }
    /**
     * Private method that creates each operation button. 
     */
    private void createOptionButtons() {
        final JButton openButton = new JButton("Open...");
        mySaveButton = new JButton("Save as...");
        myCloseButton = new JButton("  Close Image ");
        mySaveButton.setEnabled(false);
        myCloseButton.setEnabled(false);
        
        myOperationPanel.add(openButton);
        myOperationPanel.add(mySaveButton);
        myOperationPanel.add(myCloseButton);
        
        openButton.addActionListener(new OpenButtonListener());
        mySaveButton.addActionListener(new SaveButtonListener());
        myCloseButton.addActionListener(new CloseButtonListener());
    }
    /**
     * Class for the open button listener. 
     * 
     * @author Patrick Stevens
     * @version 1.0
     */
    class OpenButtonListener implements ActionListener {
        /**
         * Action Listener for open button. 
         */
        @Override
        public void actionPerformed(final ActionEvent theAction) {
            if (myFileChooser.showOpenDialog(myFrame) == (JFileChooser.APPROVE_OPTION)) {
                myFile = myFileChooser.getSelectedFile(); 
                try {
                    myImage = PixelImage.load(myFile);
                    myImageHolder.setIcon(new ImageIcon(myImage));
                    myFrame.setMinimumSize(null);
                    myFrame.pack();
                    enableButtons(true);
                    mySaveButton.setEnabled(true);
                    myCloseButton.setEnabled(true);
                } catch (final IOException ioe) {
                    JOptionPane.showMessageDialog(myFrame,
                                                "The selected file did not contain an image!",
                                                  "Error!", JOptionPane.ERROR_MESSAGE);
                }
                
                if (myMinHeight > myFrame.getHeight()) {
                    myFrame.setMinimumSize(new Dimension(myFrame.getWidth(),
                                                     myMinHeight));
                } else {
                    myFrame.setMinimumSize(new Dimension(myFrame.getWidth(),
                                                         myFrame.getHeight()));
                }
                myFrame.pack();
                
            }  
        }  
    }
    /**
     * Class for the save button listener. 
     * 
     * @author Patrick Stevens
     * @version 1.0
     */
    class SaveButtonListener implements ActionListener {
        /**
         * Action Listener for save button. 
         */
        @Override
        public void actionPerformed(final ActionEvent theAction) {
            if (myFileChooser.showSaveDialog(myFrame) == JFileChooser.APPROVE_OPTION) {
                final File selectedFile = myFileChooser.getSelectedFile();
                try {
                    if (selectedFile.exists()) {
                        final String[] but = {"Replace", "Cancel"};
                        final int replace = JOptionPane.showOptionDialog(null, 
                                                     myFileChooser.getSelectedFile() 
                                               + " already exists. Do you want to replace it?",
                                               "Error", JOptionPane.WARNING_MESSAGE, 
                                               0 , null, but, but[1]);  
                        if (replace == JOptionPane.YES_OPTION) {
                            myImage.save(selectedFile);
                        }
                    } else {
                        myImage.save(selectedFile);
                    }
                } catch (final IOException ioe) {
                    JOptionPane.showMessageDialog(myFrame, 
                                                  "There was an issue saving the file!",
                                                  "Save Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }  
    }
    /**
     * Class for the close button listener.
     * 
     * @author Patrick Stevens
     * @version 1.0
     */
    class CloseButtonListener implements ActionListener {
        /**
         * Action Listener for close button. 
         */
        @Override
        public void actionPerformed(final ActionEvent theAction) {
            myImageHolder.setIcon(null);
            enableButtons(false);
            mySaveButton.setEnabled(false);
            myCloseButton.setEnabled(false);
            myFrame.setMinimumSize(myMinSize);
            myFrame.pack();
        }
        
    }
}